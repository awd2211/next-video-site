"""add_rbac_tables

Revision ID: 9120961cbc88
Revises: 8bdfb446659f
Create Date: 2025-10-14 01:49:32.064743

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '9120961cbc88'
down_revision: Union[str, None] = '8bdfb446659f'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('video_shares',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('video_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('platform', sa.Enum('WECHAT', 'WEIBO', 'QQ', 'QZONE', 'TWITTER', 'FACEBOOK', 'LINK', 'OTHER', name='shareplatform'), nullable=False),
    sa.Column('shared_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.String(length=500), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['video_id'], ['videos.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_video_shares_id'), 'video_shares', ['id'], unique=False)
    op.create_index(op.f('ix_video_shares_platform'), 'video_shares', ['platform'], unique=False)
    op.create_index(op.f('ix_video_shares_shared_at'), 'video_shares', ['shared_at'], unique=False)
    op.create_index(op.f('ix_video_shares_user_id'), 'video_shares', ['user_id'], unique=False)
    op.create_index(op.f('ix_video_shares_video_id'), 'video_shares', ['video_id'], unique=False)
    op.drop_index(op.f('ix_admin_notifications_admin_user_id'), table_name='admin_notifications')
    op.drop_index(op.f('ix_admin_notifications_created_at'), table_name='admin_notifications')
    op.drop_index(op.f('ix_admin_notifications_is_read'), table_name='admin_notifications')
    op.drop_index(op.f('ix_admin_notifications_type'), table_name='admin_notifications')
    op.drop_table('admin_notifications')
    op.drop_index(op.f('ix_dashboard_layouts_admin_user_id'), table_name='dashboard_layouts')
    op.drop_table('dashboard_layouts')
    op.drop_index(op.f('ix_shared_watchlists_created_at'), table_name='shared_watchlists')
    op.drop_index(op.f('ix_shared_watchlists_share_token'), table_name='shared_watchlists')
    op.drop_index(op.f('ix_shared_watchlists_user_id'), table_name='shared_watchlists')
    op.drop_table('shared_watchlists')
    op.alter_column('ai_providers', 'name',
               existing_type=sa.VARCHAR(length=100),
               comment='配置名称',
               existing_nullable=False)
    op.alter_column('ai_providers', 'provider_type',
               existing_type=sa.VARCHAR(length=20),
               comment='提供商类型',
               existing_nullable=False)
    op.alter_column('ai_providers', 'description',
               existing_type=sa.TEXT(),
               comment='配置描述',
               existing_nullable=True)
    op.alter_column('ai_providers', 'api_key',
               existing_type=sa.VARCHAR(length=500),
               comment='API密钥(加密存储)',
               existing_nullable=False)
    op.alter_column('ai_providers', 'base_url',
               existing_type=sa.VARCHAR(length=500),
               comment='API基础URL(可选)',
               existing_nullable=True)
    op.alter_column('ai_providers', 'model_name',
               existing_type=sa.VARCHAR(length=100),
               comment='模型名称',
               existing_nullable=False)
    op.alter_column('ai_providers', 'max_tokens',
               existing_type=sa.INTEGER(),
               comment='最大令牌数',
               existing_nullable=True,
               existing_server_default=sa.text('2048'))
    op.alter_column('ai_providers', 'temperature',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment='温度参数',
               existing_nullable=True,
               existing_server_default=sa.text('0.7'))
    op.alter_column('ai_providers', 'top_p',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment='Top P参数',
               existing_nullable=True,
               existing_server_default=sa.text('1.0'))
    op.alter_column('ai_providers', 'frequency_penalty',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment='频率惩罚',
               existing_nullable=True,
               existing_server_default=sa.text('0.0'))
    op.alter_column('ai_providers', 'presence_penalty',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment='存在惩罚',
               existing_nullable=True,
               existing_server_default=sa.text('0.0'))
    op.alter_column('ai_providers', 'settings',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               comment='额外设置(JSON)',
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::json"))
    op.alter_column('ai_providers', 'enabled',
               existing_type=sa.BOOLEAN(),
               comment='是否启用',
               existing_nullable=False,
               existing_server_default=sa.text('true'))
    op.alter_column('ai_providers', 'is_default',
               existing_type=sa.BOOLEAN(),
               comment='是否为默认配置',
               existing_nullable=False,
               existing_server_default=sa.text('false'))
    op.alter_column('ai_providers', 'total_requests',
               existing_type=sa.INTEGER(),
               comment='总请求次数',
               existing_nullable=False,
               existing_server_default=sa.text('0'))
    op.alter_column('ai_providers', 'total_tokens',
               existing_type=sa.INTEGER(),
               comment='总令牌使用量',
               existing_nullable=False,
               existing_server_default=sa.text('0'))
    op.alter_column('ai_providers', 'last_used_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='最后使用时间',
               existing_nullable=True)
    op.alter_column('ai_providers', 'last_test_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='最后测试时间',
               existing_nullable=True)
    op.alter_column('ai_providers', 'last_test_status',
               existing_type=sa.VARCHAR(length=20),
               comment='最后测试状态: success/failed',
               existing_nullable=True)
    op.alter_column('ai_providers', 'last_test_message',
               existing_type=sa.TEXT(),
               comment='最后测试消息',
               existing_nullable=True)
    op.drop_index(op.f('ix_ai_providers_enabled'), table_name='ai_providers')
    op.drop_index(op.f('ix_search_history_user_created'), table_name='search_history')
    op.alter_column('watchlist', 'position',
               existing_type=sa.INTEGER(),
               comment="User's custom sort order",
               existing_nullable=False,
               existing_server_default=sa.text('0'))
    op.create_index(op.f('ix_watchlist_id'), 'watchlist', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_watchlist_id'), table_name='watchlist')
    op.alter_column('watchlist', 'position',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment="User's custom sort order",
               existing_nullable=False,
               existing_server_default=sa.text('0'))
    op.create_index(op.f('ix_search_history_user_created'), 'search_history', ['user_id', 'created_at'], unique=False)
    op.create_index(op.f('ix_ai_providers_enabled'), 'ai_providers', ['enabled'], unique=False)
    op.alter_column('ai_providers', 'last_test_message',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='最后测试消息',
               existing_nullable=True)
    op.alter_column('ai_providers', 'last_test_status',
               existing_type=sa.VARCHAR(length=20),
               comment=None,
               existing_comment='最后测试状态: success/failed',
               existing_nullable=True)
    op.alter_column('ai_providers', 'last_test_at',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='最后测试时间',
               existing_nullable=True)
    op.alter_column('ai_providers', 'last_used_at',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='最后使用时间',
               existing_nullable=True)
    op.alter_column('ai_providers', 'total_tokens',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='总令牌使用量',
               existing_nullable=False,
               existing_server_default=sa.text('0'))
    op.alter_column('ai_providers', 'total_requests',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='总请求次数',
               existing_nullable=False,
               existing_server_default=sa.text('0'))
    op.alter_column('ai_providers', 'is_default',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='是否为默认配置',
               existing_nullable=False,
               existing_server_default=sa.text('false'))
    op.alter_column('ai_providers', 'enabled',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='是否启用',
               existing_nullable=False,
               existing_server_default=sa.text('true'))
    op.alter_column('ai_providers', 'settings',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               comment=None,
               existing_comment='额外设置(JSON)',
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::json"))
    op.alter_column('ai_providers', 'presence_penalty',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment=None,
               existing_comment='存在惩罚',
               existing_nullable=True,
               existing_server_default=sa.text('0.0'))
    op.alter_column('ai_providers', 'frequency_penalty',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment=None,
               existing_comment='频率惩罚',
               existing_nullable=True,
               existing_server_default=sa.text('0.0'))
    op.alter_column('ai_providers', 'top_p',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment=None,
               existing_comment='Top P参数',
               existing_nullable=True,
               existing_server_default=sa.text('1.0'))
    op.alter_column('ai_providers', 'temperature',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment=None,
               existing_comment='温度参数',
               existing_nullable=True,
               existing_server_default=sa.text('0.7'))
    op.alter_column('ai_providers', 'max_tokens',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='最大令牌数',
               existing_nullable=True,
               existing_server_default=sa.text('2048'))
    op.alter_column('ai_providers', 'model_name',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='模型名称',
               existing_nullable=False)
    op.alter_column('ai_providers', 'base_url',
               existing_type=sa.VARCHAR(length=500),
               comment=None,
               existing_comment='API基础URL(可选)',
               existing_nullable=True)
    op.alter_column('ai_providers', 'api_key',
               existing_type=sa.VARCHAR(length=500),
               comment=None,
               existing_comment='API密钥(加密存储)',
               existing_nullable=False)
    op.alter_column('ai_providers', 'description',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='配置描述',
               existing_nullable=True)
    op.alter_column('ai_providers', 'provider_type',
               existing_type=sa.VARCHAR(length=20),
               comment=None,
               existing_comment='提供商类型',
               existing_nullable=False)
    op.alter_column('ai_providers', 'name',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='配置名称',
               existing_nullable=False)
    op.create_table('shared_watchlists',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('share_token', sa.VARCHAR(length=32), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('video_ids', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('view_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('shared_watchlists_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('shared_watchlists_pkey')),
    sa.UniqueConstraint('share_token', name=op.f('shared_watchlists_share_token_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_shared_watchlists_user_id'), 'shared_watchlists', ['user_id'], unique=False)
    op.create_index(op.f('ix_shared_watchlists_share_token'), 'shared_watchlists', ['share_token'], unique=False)
    op.create_index(op.f('ix_shared_watchlists_created_at'), 'shared_watchlists', ['created_at'], unique=False)
    op.create_table('dashboard_layouts',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('admin_user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('layout_config', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['admin_user_id'], ['admin_users.id'], name=op.f('dashboard_layouts_admin_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('dashboard_layouts_pkey')),
    sa.UniqueConstraint('admin_user_id', name=op.f('uq_dashboard_layouts_admin_user_id'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_dashboard_layouts_admin_user_id'), 'dashboard_layouts', ['admin_user_id'], unique=True)
    op.create_table('admin_notifications',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('admin_user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('severity', sa.VARCHAR(length=20), server_default=sa.text("'info'::character varying"), autoincrement=False, nullable=False),
    sa.Column('related_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('related_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('link', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('is_read', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('read_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['admin_user_id'], ['admin_users.id'], name=op.f('admin_notifications_admin_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('admin_notifications_pkey'))
    )
    op.create_index(op.f('ix_admin_notifications_type'), 'admin_notifications', ['type'], unique=False)
    op.create_index(op.f('ix_admin_notifications_is_read'), 'admin_notifications', ['is_read'], unique=False)
    op.create_index(op.f('ix_admin_notifications_created_at'), 'admin_notifications', ['created_at'], unique=False)
    op.create_index(op.f('ix_admin_notifications_admin_user_id'), 'admin_notifications', ['admin_user_id'], unique=False)
    op.drop_index(op.f('ix_video_shares_video_id'), table_name='video_shares')
    op.drop_index(op.f('ix_video_shares_user_id'), table_name='video_shares')
    op.drop_index(op.f('ix_video_shares_shared_at'), table_name='video_shares')
    op.drop_index(op.f('ix_video_shares_platform'), table_name='video_shares')
    op.drop_index(op.f('ix_video_shares_id'), table_name='video_shares')
    op.drop_table('video_shares')
    # ### end Alembic commands ###
