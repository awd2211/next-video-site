"""add_unified_content_scheduling_system

Revision ID: 81dc6d5bbe3a
Revises: 9120961cbc88
Create Date: 2025-10-14 02:23:37.049927

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '81dc6d5bbe3a'
down_revision: Union[str, None] = '9120961cbc88'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('content_schedules',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('content_type', sa.Enum('VIDEO', 'BANNER', 'ANNOUNCEMENT', 'RECOMMENDATION', 'SERIES', name='schedulecontenttype'), nullable=False, comment='内容类型'),
    sa.Column('content_id', sa.Integer(), nullable=False, comment='内容ID'),
    sa.Column('scheduled_time', sa.DateTime(timezone=True), nullable=False, comment='计划发布时间'),
    sa.Column('actual_publish_time', sa.DateTime(timezone=True), nullable=True, comment='实际发布时间'),
    sa.Column('end_time', sa.DateTime(timezone=True), nullable=True, comment='结束时间（自动下线）'),
    sa.Column('status', sa.Enum('PENDING', 'PUBLISHED', 'FAILED', 'CANCELLED', 'EXPIRED', name='schedulestatus'), nullable=False, comment='调度状态'),
    sa.Column('auto_publish', sa.Boolean(), nullable=False, comment='是否自动发布'),
    sa.Column('auto_expire', sa.Boolean(), nullable=False, comment='是否自动过期'),
    sa.Column('publish_strategy', sa.Enum('IMMEDIATE', 'PROGRESSIVE', 'REGIONAL', 'AB_TEST', name='publishstrategy'), nullable=False, comment='发布策略'),
    sa.Column('strategy_config', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='策略配置（如渐进式发布的百分比、区域列表等）'),
    sa.Column('recurrence', sa.Enum('ONCE', 'DAILY', 'WEEKLY', 'MONTHLY', name='schedulerecurrence'), nullable=False, comment='重复类型'),
    sa.Column('recurrence_config', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='重复配置（如每周的星期几、每月的日期等）'),
    sa.Column('next_occurrence', sa.DateTime(timezone=True), nullable=True, comment='下次执行时间（用于重复任务）'),
    sa.Column('notify_subscribers', sa.Boolean(), nullable=False, comment='是否通知订阅者'),
    sa.Column('notify_before_minutes', sa.Integer(), nullable=False, comment='提前通知分钟数（0表示不提前）'),
    sa.Column('notification_sent', sa.Boolean(), nullable=False, comment='是否已发送通知'),
    sa.Column('condition_type', sa.String(length=50), nullable=True, comment='条件类型（如approval_required, min_views）'),
    sa.Column('condition_value', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='条件参数'),
    sa.Column('condition_met', sa.Boolean(), nullable=False, comment='条件是否满足'),
    sa.Column('priority', sa.Integer(), nullable=False, comment='优先级（数字越大优先级越高）'),
    sa.Column('sort_order', sa.Integer(), nullable=False, comment='排序'),
    sa.Column('error_message', sa.Text(), nullable=True, comment='错误信息'),
    sa.Column('retry_count', sa.Integer(), nullable=False, comment='重试次数'),
    sa.Column('max_retry', sa.Integer(), nullable=False, comment='最大重试次数'),
    sa.Column('title', sa.String(length=500), nullable=True, comment='调度任务标题（用于显示）'),
    sa.Column('description', sa.Text(), nullable=True, comment='说明'),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='标签'),
    sa.Column('extra_data', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='额外元数据'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='创建人'),
    sa.Column('updated_by', sa.Integer(), nullable=True, comment='最后更新人'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['admin_users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['updated_by'], ['admin_users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_content_schedules_content_id'), 'content_schedules', ['content_id'], unique=False)
    op.create_index(op.f('ix_content_schedules_content_type'), 'content_schedules', ['content_type'], unique=False)
    op.create_index(op.f('ix_content_schedules_created_at'), 'content_schedules', ['created_at'], unique=False)
    op.create_index(op.f('ix_content_schedules_id'), 'content_schedules', ['id'], unique=False)
    op.create_index(op.f('ix_content_schedules_scheduled_time'), 'content_schedules', ['scheduled_time'], unique=False)
    op.create_index(op.f('ix_content_schedules_status'), 'content_schedules', ['status'], unique=False)
    op.create_table('schedule_templates',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False, comment='模板名称'),
    sa.Column('description', sa.Text(), nullable=True, comment='模板描述'),
    sa.Column('content_types', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='适用的内容类型列表'),
    sa.Column('publish_strategy', sa.Enum('IMMEDIATE', 'PROGRESSIVE', 'REGIONAL', 'AB_TEST', name='publishstrategy'), nullable=False),
    sa.Column('strategy_config', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('recurrence', sa.Enum('ONCE', 'DAILY', 'WEEKLY', 'MONTHLY', name='schedulerecurrence'), nullable=False),
    sa.Column('recurrence_config', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('notify_subscribers', sa.Boolean(), nullable=False),
    sa.Column('notify_before_minutes', sa.Integer(), nullable=False),
    sa.Column('usage_count', sa.Integer(), nullable=False, comment='使用次数'),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_system', sa.Boolean(), nullable=False, comment='是否系统模板'),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['admin_users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_schedule_templates_id'), 'schedule_templates', ['id'], unique=False)
    op.create_table('schedule_histories',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('schedule_id', sa.Integer(), nullable=False),
    sa.Column('action', sa.String(length=50), nullable=False, comment='操作类型（created, published, failed, cancelled, rolled_back）'),
    sa.Column('status_before', sa.String(length=50), nullable=True, comment='操作前状态'),
    sa.Column('status_after', sa.String(length=50), nullable=False, comment='操作后状态'),
    sa.Column('success', sa.Boolean(), nullable=False, comment='是否成功'),
    sa.Column('message', sa.Text(), nullable=True, comment='消息或错误信息'),
    sa.Column('details', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='详细信息'),
    sa.Column('executed_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('executed_by', sa.Integer(), nullable=True, comment='执行人（手动操作时）'),
    sa.Column('is_automatic', sa.Boolean(), nullable=False, comment='是否自动执行'),
    sa.Column('execution_time_ms', sa.Integer(), nullable=True, comment='执行耗时（毫秒）'),
    sa.ForeignKeyConstraint(['executed_by'], ['admin_users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['schedule_id'], ['content_schedules.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_schedule_histories_executed_at'), 'schedule_histories', ['executed_at'], unique=False)
    op.create_index(op.f('ix_schedule_histories_id'), 'schedule_histories', ['id'], unique=False)
    op.create_index(op.f('ix_schedule_histories_schedule_id'), 'schedule_histories', ['schedule_id'], unique=False)
    # NOTE: Keeping admin_notifications table - it's still needed by the application
    # op.drop_index(op.f('ix_admin_notifications_admin_user_id'), table_name='admin_notifications')
    # op.drop_index(op.f('ix_admin_notifications_created_at'), table_name='admin_notifications')
    # op.drop_index(op.f('ix_admin_notifications_is_read'), table_name='admin_notifications')
    # op.drop_index(op.f('ix_admin_notifications_type'), table_name='admin_notifications')
    # op.drop_table('admin_notifications')
    op.alter_column('ai_providers', 'name',
               existing_type=sa.VARCHAR(length=100),
               comment='配置名称',
               existing_nullable=False)
    op.alter_column('ai_providers', 'provider_type',
               existing_type=sa.VARCHAR(length=20),
               comment='提供商类型',
               existing_nullable=False)
    op.alter_column('ai_providers', 'description',
               existing_type=sa.TEXT(),
               comment='配置描述',
               existing_nullable=True)
    op.alter_column('ai_providers', 'api_key',
               existing_type=sa.VARCHAR(length=500),
               comment='API密钥(加密存储)',
               existing_nullable=False)
    op.alter_column('ai_providers', 'base_url',
               existing_type=sa.VARCHAR(length=500),
               comment='API基础URL(可选)',
               existing_nullable=True)
    op.alter_column('ai_providers', 'model_name',
               existing_type=sa.VARCHAR(length=100),
               comment='模型名称',
               existing_nullable=False)
    op.alter_column('ai_providers', 'max_tokens',
               existing_type=sa.INTEGER(),
               comment='最大令牌数',
               existing_nullable=True,
               existing_server_default=sa.text('2048'))
    op.alter_column('ai_providers', 'temperature',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment='温度参数',
               existing_nullable=True,
               existing_server_default=sa.text('0.7'))
    op.alter_column('ai_providers', 'top_p',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment='Top P参数',
               existing_nullable=True,
               existing_server_default=sa.text('1.0'))
    op.alter_column('ai_providers', 'frequency_penalty',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment='频率惩罚',
               existing_nullable=True,
               existing_server_default=sa.text('0.0'))
    op.alter_column('ai_providers', 'presence_penalty',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment='存在惩罚',
               existing_nullable=True,
               existing_server_default=sa.text('0.0'))
    op.alter_column('ai_providers', 'settings',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               comment='额外设置(JSON)',
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::json"))
    op.alter_column('ai_providers', 'enabled',
               existing_type=sa.BOOLEAN(),
               comment='是否启用',
               existing_nullable=False,
               existing_server_default=sa.text('true'))
    op.alter_column('ai_providers', 'is_default',
               existing_type=sa.BOOLEAN(),
               comment='是否为默认配置',
               existing_nullable=False,
               existing_server_default=sa.text('false'))
    op.alter_column('ai_providers', 'total_requests',
               existing_type=sa.INTEGER(),
               comment='总请求次数',
               existing_nullable=False,
               existing_server_default=sa.text('0'))
    op.alter_column('ai_providers', 'total_tokens',
               existing_type=sa.INTEGER(),
               comment='总令牌使用量',
               existing_nullable=False,
               existing_server_default=sa.text('0'))
    op.alter_column('ai_providers', 'last_used_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='最后使用时间',
               existing_nullable=True)
    op.alter_column('ai_providers', 'last_test_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='最后测试时间',
               existing_nullable=True)
    op.alter_column('ai_providers', 'last_test_status',
               existing_type=sa.VARCHAR(length=20),
               comment='最后测试状态: success/failed',
               existing_nullable=True)
    op.alter_column('ai_providers', 'last_test_message',
               existing_type=sa.TEXT(),
               comment='最后测试消息',
               existing_nullable=True)
    op.drop_index(op.f('ix_ai_providers_enabled'), table_name='ai_providers')
    op.drop_constraint(op.f('uq_dashboard_layouts_admin_user_id'), 'dashboard_layouts', type_='unique')
    op.create_index(op.f('ix_dashboard_layouts_id'), 'dashboard_layouts', ['id'], unique=False)
    op.drop_index(op.f('ix_search_history_user_created'), table_name='search_history')
    op.alter_column('shared_watchlists', 'share_token',
               existing_type=sa.VARCHAR(length=32),
               comment='Unique token for sharing',
               existing_nullable=False)
    op.alter_column('shared_watchlists', 'title',
               existing_type=sa.VARCHAR(length=200),
               comment='Custom title for shared list',
               existing_nullable=False)
    op.alter_column('shared_watchlists', 'description',
               existing_type=sa.TEXT(),
               comment='Optional description',
               existing_nullable=True)
    op.alter_column('shared_watchlists', 'video_ids',
               existing_type=sa.TEXT(),
               comment='Comma-separated video IDs',
               existing_nullable=False)
    op.alter_column('shared_watchlists', 'is_active',
               existing_type=sa.BOOLEAN(),
               comment='Whether the share link is active',
               existing_nullable=False,
               existing_server_default=sa.text('true'))
    op.alter_column('shared_watchlists', 'view_count',
               existing_type=sa.INTEGER(),
               comment='Number of views',
               existing_nullable=False,
               existing_server_default=sa.text('0'))
    op.alter_column('shared_watchlists', 'expires_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='Optional expiration date',
               existing_nullable=True)
    op.drop_constraint(op.f('shared_watchlists_share_token_key'), 'shared_watchlists', type_='unique')
    op.drop_index(op.f('ix_shared_watchlists_share_token'), table_name='shared_watchlists')
    op.create_index(op.f('ix_shared_watchlists_share_token'), 'shared_watchlists', ['share_token'], unique=True)
    op.create_index(op.f('ix_shared_watchlists_id'), 'shared_watchlists', ['id'], unique=False)
    op.alter_column('watchlist', 'position',
               existing_type=sa.INTEGER(),
               comment="User's custom sort order",
               existing_nullable=False,
               existing_server_default=sa.text('0'))
    op.create_index(op.f('ix_watchlist_id'), 'watchlist', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_watchlist_id'), table_name='watchlist')
    op.alter_column('watchlist', 'position',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment="User's custom sort order",
               existing_nullable=False,
               existing_server_default=sa.text('0'))
    op.drop_index(op.f('ix_shared_watchlists_id'), table_name='shared_watchlists')
    op.drop_index(op.f('ix_shared_watchlists_share_token'), table_name='shared_watchlists')
    op.create_index(op.f('ix_shared_watchlists_share_token'), 'shared_watchlists', ['share_token'], unique=False)
    op.create_unique_constraint(op.f('shared_watchlists_share_token_key'), 'shared_watchlists', ['share_token'], postgresql_nulls_not_distinct=False)
    op.alter_column('shared_watchlists', 'expires_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='Optional expiration date',
               existing_nullable=True)
    op.alter_column('shared_watchlists', 'view_count',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Number of views',
               existing_nullable=False,
               existing_server_default=sa.text('0'))
    op.alter_column('shared_watchlists', 'is_active',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='Whether the share link is active',
               existing_nullable=False,
               existing_server_default=sa.text('true'))
    op.alter_column('shared_watchlists', 'video_ids',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='Comma-separated video IDs',
               existing_nullable=False)
    op.alter_column('shared_watchlists', 'description',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='Optional description',
               existing_nullable=True)
    op.alter_column('shared_watchlists', 'title',
               existing_type=sa.VARCHAR(length=200),
               comment=None,
               existing_comment='Custom title for shared list',
               existing_nullable=False)
    op.alter_column('shared_watchlists', 'share_token',
               existing_type=sa.VARCHAR(length=32),
               comment=None,
               existing_comment='Unique token for sharing',
               existing_nullable=False)
    op.create_index(op.f('ix_search_history_user_created'), 'search_history', ['user_id', 'created_at'], unique=False)
    op.drop_index(op.f('ix_dashboard_layouts_id'), table_name='dashboard_layouts')
    op.create_unique_constraint(op.f('uq_dashboard_layouts_admin_user_id'), 'dashboard_layouts', ['admin_user_id'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('ix_ai_providers_enabled'), 'ai_providers', ['enabled'], unique=False)
    op.alter_column('ai_providers', 'last_test_message',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='最后测试消息',
               existing_nullable=True)
    op.alter_column('ai_providers', 'last_test_status',
               existing_type=sa.VARCHAR(length=20),
               comment=None,
               existing_comment='最后测试状态: success/failed',
               existing_nullable=True)
    op.alter_column('ai_providers', 'last_test_at',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='最后测试时间',
               existing_nullable=True)
    op.alter_column('ai_providers', 'last_used_at',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='最后使用时间',
               existing_nullable=True)
    op.alter_column('ai_providers', 'total_tokens',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='总令牌使用量',
               existing_nullable=False,
               existing_server_default=sa.text('0'))
    op.alter_column('ai_providers', 'total_requests',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='总请求次数',
               existing_nullable=False,
               existing_server_default=sa.text('0'))
    op.alter_column('ai_providers', 'is_default',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='是否为默认配置',
               existing_nullable=False,
               existing_server_default=sa.text('false'))
    op.alter_column('ai_providers', 'enabled',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='是否启用',
               existing_nullable=False,
               existing_server_default=sa.text('true'))
    op.alter_column('ai_providers', 'settings',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               comment=None,
               existing_comment='额外设置(JSON)',
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::json"))
    op.alter_column('ai_providers', 'presence_penalty',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment=None,
               existing_comment='存在惩罚',
               existing_nullable=True,
               existing_server_default=sa.text('0.0'))
    op.alter_column('ai_providers', 'frequency_penalty',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment=None,
               existing_comment='频率惩罚',
               existing_nullable=True,
               existing_server_default=sa.text('0.0'))
    op.alter_column('ai_providers', 'top_p',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment=None,
               existing_comment='Top P参数',
               existing_nullable=True,
               existing_server_default=sa.text('1.0'))
    op.alter_column('ai_providers', 'temperature',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment=None,
               existing_comment='温度参数',
               existing_nullable=True,
               existing_server_default=sa.text('0.7'))
    op.alter_column('ai_providers', 'max_tokens',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='最大令牌数',
               existing_nullable=True,
               existing_server_default=sa.text('2048'))
    op.alter_column('ai_providers', 'model_name',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='模型名称',
               existing_nullable=False)
    op.alter_column('ai_providers', 'base_url',
               existing_type=sa.VARCHAR(length=500),
               comment=None,
               existing_comment='API基础URL(可选)',
               existing_nullable=True)
    op.alter_column('ai_providers', 'api_key',
               existing_type=sa.VARCHAR(length=500),
               comment=None,
               existing_comment='API密钥(加密存储)',
               existing_nullable=False)
    op.alter_column('ai_providers', 'description',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='配置描述',
               existing_nullable=True)
    op.alter_column('ai_providers', 'provider_type',
               existing_type=sa.VARCHAR(length=20),
               comment=None,
               existing_comment='提供商类型',
               existing_nullable=False)
    op.alter_column('ai_providers', 'name',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='配置名称',
               existing_nullable=False)
    # NOTE: Not recreating admin_notifications since we didn't drop it in upgrade
    # op.create_table('admin_notifications',
    # sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    # sa.Column('admin_user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    # sa.Column('title', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    # sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    # sa.Column('severity', sa.VARCHAR(length=20), server_default=sa.text("'info'::character varying"), autoincrement=False, nullable=False),
    # sa.Column('related_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.Column('related_id', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('link', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    # sa.Column('is_read', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    # sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    # sa.Column('read_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    # sa.ForeignKeyConstraint(['admin_user_id'], ['admin_users.id'], name=op.f('admin_notifications_admin_user_id_fkey'), ondelete='CASCADE'),
    # sa.PrimaryKeyConstraint('id', name=op.f('admin_notifications_pkey'))
    # )
    # op.create_index(op.f('ix_admin_notifications_type'), 'admin_notifications', ['type'], unique=False)
    # op.create_index(op.f('ix_admin_notifications_is_read'), 'admin_notifications', ['is_read'], unique=False)
    # op.create_index(op.f('ix_admin_notifications_created_at'), 'admin_notifications', ['created_at'], unique=False)
    # op.create_index(op.f('ix_admin_notifications_admin_user_id'), 'admin_notifications', ['admin_user_id'], unique=False)
    op.drop_index(op.f('ix_schedule_histories_schedule_id'), table_name='schedule_histories')
    op.drop_index(op.f('ix_schedule_histories_id'), table_name='schedule_histories')
    op.drop_index(op.f('ix_schedule_histories_executed_at'), table_name='schedule_histories')
    op.drop_table('schedule_histories')
    op.drop_index(op.f('ix_schedule_templates_id'), table_name='schedule_templates')
    op.drop_table('schedule_templates')
    op.drop_index(op.f('ix_content_schedules_status'), table_name='content_schedules')
    op.drop_index(op.f('ix_content_schedules_scheduled_time'), table_name='content_schedules')
    op.drop_index(op.f('ix_content_schedules_id'), table_name='content_schedules')
    op.drop_index(op.f('ix_content_schedules_created_at'), table_name='content_schedules')
    op.drop_index(op.f('ix_content_schedules_content_type'), table_name='content_schedules')
    op.drop_index(op.f('ix_content_schedules_content_id'), table_name='content_schedules')
    op.drop_table('content_schedules')
    # ### end Alembic commands ###
