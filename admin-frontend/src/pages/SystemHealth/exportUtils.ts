import { message } from 'antd';

interface ExportData {
  timestamp: string;
  overall_status: string;
  services: any;
  system_resources: any;
}

export const exportHealthReport = (data: ExportData, t: (key: string) => string) => {
  try {
    // Create report content
    const report = `# System Health Report
Generated at: ${new Date(data.timestamp).toLocaleString()}

## Overall Status: ${data.overall_status.toUpperCase()}

## Services Status

### Database (PostgreSQL)
- Status: ${data.services.database.status}
- Response Time: ${data.services.database.response_time_ms?.toFixed(2) || 'N/A'} ms
- Pool Size: ${data.services.database.pool_size || 'N/A'}
- Checked Out: ${data.services.database.checked_out || 0}
- Available: ${data.services.database.checked_in || 0}
- Utilization: ${data.services.database.utilization_percent?.toFixed(1) || 'N/A'}%

### Redis Cache
- Status: ${data.services.redis.status}
- Response Time: ${data.services.redis.response_time_ms?.toFixed(2) || 'N/A'} ms
- Used Memory: ${data.services.redis.used_memory_mb?.toFixed(2) || 'N/A'} MB
- Max Memory: ${typeof data.services.redis.max_memory_mb === 'number' ? data.services.redis.max_memory_mb.toFixed(2) + ' MB' : data.services.redis.max_memory_mb || 'N/A'}
- Keys Count: ${data.services.redis.keys_count?.toLocaleString() || 0}

### Object Storage (MinIO)
- Status: ${data.services.storage.status}
- Response Time: ${data.services.storage.response_time_ms?.toFixed(2) || 'N/A'} ms
- Bucket Exists: ${data.services.storage.bucket_exists ? 'Yes' : 'No'}
- Read Access: ${data.services.storage.can_read ? 'OK' : 'Limited'}

## System Resources

### CPU
- Usage: ${data.system_resources.cpu?.usage_percent || 0}%
- Cores: ${data.system_resources.cpu?.cores || 0}
- Frequency: ${data.system_resources.cpu?.frequency_mhz || 'N/A'} MHz
- Status: ${data.system_resources.cpu?.status || 'unknown'}

### Memory
- Used: ${data.system_resources.memory?.used_gb?.toFixed(2) || 0} GB
- Total: ${data.system_resources.memory?.total_gb?.toFixed(2) || 0} GB
- Available: ${data.system_resources.memory?.available_gb?.toFixed(2) || 0} GB
- Usage: ${data.system_resources.memory?.usage_percent || 0}%
- Status: ${data.system_resources.memory?.status || 'unknown'}

### Disk
- Used: ${data.system_resources.disk?.used_gb?.toFixed(2) || 0} GB
- Total: ${data.system_resources.disk?.total_gb?.toFixed(2) || 0} GB
- Free: ${data.system_resources.disk?.free_gb?.toFixed(2) || 0} GB
- Usage: ${data.system_resources.disk?.usage_percent || 0}%
- Status: ${data.system_resources.disk?.status || 'unknown'}

### Network
- Data Sent: ${data.system_resources.network?.bytes_sent_gb?.toFixed(2) || 0} GB
- Data Received: ${data.system_resources.network?.bytes_recv_gb?.toFixed(2) || 0} GB
- Packets Sent: ${data.system_resources.network?.packets_sent?.toLocaleString() || 0}
- Packets Received: ${data.system_resources.network?.packets_recv?.toLocaleString() || 0}
- Errors In: ${data.system_resources.network?.errors_in || 0}
- Errors Out: ${data.system_resources.network?.errors_out || 0}

### Processes
- Active Processes: ${data.system_resources.processes?.count || 0}

---
Report generated by System Health Monitor
`;

    // Create blob and download
    const blob = new Blob([report], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `system-health-report-${new Date().toISOString().split('T')[0]}.md`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);

    message.success(t('systemHealth.export.success'));
  } catch (error) {
    console.error('Export failed:', error);
    message.error(t('systemHealth.export.failed'));
  }
};

export const exportHistoryCSV = (historyData: any[], t: (key: string) => string) => {
  try {
    if (!historyData || historyData.length === 0) {
      message.warning(t('message.noDataToExport'));
      return;
    }

    // Create CSV header
    const header = 'Timestamp,CPU Usage (%),Memory Usage (%),Disk Usage (%),DB Response Time (ms),Redis Response Time (ms),Storage Response Time (ms)\n';

    // Create CSV rows
    const rows = historyData.map((entry) => {
      const data = entry.data;
      return `${new Date(entry.timestamp).toLocaleString()},${data.cpu_usage || 0},${data.memory_usage || 0},${data.disk_usage || 0},${data.db_response_time || 0},${data.redis_response_time || 0},${data.storage_response_time || 0}`;
    }).join('\n');

    const csv = header + rows;

    // Create blob and download
    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `system-metrics-history-${new Date().toISOString().split('T')[0]}.csv`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);

    message.success(t('systemHealth.export.success'));
  } catch (error) {
    console.error('Export failed:', error);
    message.error(t('systemHealth.export.failed'));
  }
};
