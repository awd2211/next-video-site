version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16
    container_name: videosite_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: videosite
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    container_name: videosite_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO (S3-compatible storage)
  minio:
    image: minio/minio:latest
    container_name: videosite_minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Elasticsearch (optional, for advanced search)
  # elasticsearch:
  #   image: elasticsearch:8.12.0
  #   container_name: videosite_elasticsearch
  #   environment:
  #     - discovery.type=single-node
  #     - xpack.security.enabled=false
  #     - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
  #   ports:
  #     - "9200:9200"
  #   volumes:
  #     - es_data:/usr/share/elasticsearch/data

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: videosite_backend
    environment:
      DATABASE_URL: postgresql+asyncpg://postgres:postgres@postgres:5432/videosite
      DATABASE_URL_SYNC: postgresql://postgres:postgres@postgres:5432/videosite
      REDIS_URL: redis://redis:6379/0
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      SECRET_KEY: your-secret-key-change-in-production
      JWT_SECRET_KEY: your-jwt-secret-key-change-in-production
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Celery Worker (for async tasks)
  # celery_worker:
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile
  #   container_name: videosite_celery
  #   environment:
  #     DATABASE_URL: postgresql+asyncpg://postgres:postgres@postgres:5432/videosite
  #     REDIS_URL: redis://redis:6379/0
  #     CELERY_BROKER_URL: redis://redis:6379/1
  #     CELERY_RESULT_BACKEND: redis://redis:6379/2
  #   depends_on:
  #     - postgres
  #     - redis
  #   command: celery -A app.tasks worker --loglevel=info

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: videosite_frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - VITE_API_URL=http://localhost:8000
    command: pnpm run dev -- --host

  # Admin Frontend
  admin_frontend:
    build:
      context: ./admin-frontend
      dockerfile: Dockerfile
    container_name: videosite_admin
    ports:
      - "3001:3001"
    volumes:
      - ./admin-frontend:/app
      - /app/node_modules
    environment:
      - VITE_API_URL=http://localhost:8000
    command: pnpm run dev -- --host

volumes:
  postgres_data:
  redis_data:
  minio_data:
  # es_data:
