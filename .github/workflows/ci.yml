name: CI

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

jobs:
  backend-test:
    name: 后端测试
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: videosite_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置 Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: 安装依赖
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov httpx

    - name: 代码检查 (flake8)
      working-directory: ./backend
      run: |
        pip install flake8
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true

    - name: 运行测试
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql+asyncpg://test:test@localhost:5432/videosite_test
        DATABASE_URL_SYNC: postgresql://test:test@localhost:5432/videosite_test
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key-for-ci
        JWT_SECRET_KEY: test-jwt-secret-key
      run: |
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=term

    - name: 上传覆盖率报告
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  frontend-test:
    name: 前端测试
    runs-on: ubuntu-latest

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: 安装 pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8

    - name: 获取 pnpm store 目录
      id: pnpm-cache
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

    - name: 设置 pnpm 缓存
      uses: actions/cache@v3
      with:
        path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: 安装依赖
      working-directory: ./frontend
      run: pnpm install

    - name: 代码检查
      working-directory: ./frontend
      run: pnpm run lint
      continue-on-error: true

    - name: 类型检查
      working-directory: ./frontend
      run: pnpm run type-check
      continue-on-error: true

    - name: 构建
      working-directory: ./frontend
      run: pnpm run build

    # 如果有测试，取消注释以下部分
    # - name: 运行测试
    #   working-directory: ./frontend
    #   run: pnpm run test

  admin-frontend-test:
    name: 管理后台测试
    runs-on: ubuntu-latest

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: 安装 pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8

    - name: 获取 pnpm store 目录
      id: pnpm-cache
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

    - name: 设置 pnpm 缓存
      uses: actions/cache@v3
      with:
        path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: 安装依赖
      working-directory: ./admin-frontend
      run: pnpm install

    - name: 代码检查
      working-directory: ./admin-frontend
      run: pnpm run lint
      continue-on-error: true

    - name: 类型检查
      working-directory: ./admin-frontend
      run: pnpm run type-check
      continue-on-error: true

    - name: 构建
      working-directory: ./admin-frontend
      run: pnpm run build

  docker-build:
    name: Docker 构建测试
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置 Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 构建 Docker 镜像
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: videosite:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
